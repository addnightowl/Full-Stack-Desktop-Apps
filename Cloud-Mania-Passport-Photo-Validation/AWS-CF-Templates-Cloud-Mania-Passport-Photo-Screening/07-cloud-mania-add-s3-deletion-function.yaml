AWSTemplateFormatVersion: "2010-09-09"
Description: Create a Lambda Function to Delete ALL S3 Objects before Deleting the Passport Photo Screening application.

Resources:
  CloudManiaImagesBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: cloudmania-passportimages
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:Put"
            Function: !GetAtt "CloudManiaPhotoValidationProcessor.Arn"

  CloudManiaS3BucketPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref "CloudManiaPhotoValidationProcessor"
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !GetAtt "CloudManiaImagesBucket.Arn"

  CloudManiaDynamoDBAutoScalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'CloudMania-DynamoDBAutoScalingRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'dynamodb.application-autoscaling.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudMania-DynamoDbAutoScalingPermissionsPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:UpdateTable'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:DeleteAlarms'
                Resource: '*'

  CloudManiaDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: CloudManiaValidationRequests
      AttributeDefinitions:
        - AttributeName: FileName
          AttributeType: S
      KeySchema:
        - AttributeName: FileName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  CloudManiaTableReadCapacityScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: 100
      MinCapacity: 5
      ResourceId: !Sub 'table/${CloudManiaDynamoDBTable}'
      RoleARN: !GetAtt CloudManiaDynamoDBAutoScalingRole.Arn
      ScalableDimension: 'dynamodb:table:ReadCapacityUnits'
      ServiceNamespace: 'dynamodb'

  CloudManiaTableWriteCapacityScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: 100
      MinCapacity: 5
      ResourceId: !Sub 'table/${CloudManiaDynamoDBTable}'
      RoleARN: !GetAtt CloudManiaDynamoDBAutoScalingRole.Arn
      ScalableDimension: 'dynamodb:table:WriteCapacityUnits'
      ServiceNamespace: 'dynamodb'

  CloudManiaTableReadScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: 'TableReadScalingPolicy'
      PolicyType: 'TargetTrackingScaling'
      ScalingTargetId: !Ref CloudManiaTableReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: 'DynamoDBReadCapacityUtilization'

  CloudManiaTableWriteScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: 'TableWriteScalingPolicy'
      PolicyType: 'TargetTrackingScaling'
      ScalingTargetId: !Ref CloudManiaTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: 'DynamoDBWriteCapacityUtilization'

  CloudManiaPhotoValidationProcessorLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CloudMania-PhotoValidationProcessorLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CloudMania-S3GetObjectPolicy-PhotoValidationProcessor
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::cloudmania-passportimages/*"
        - PolicyName: CloudMania-DynamoDBPutItemPolicy-PhotoValidationProcessor
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt "CloudManiaDynamoDBTable.Arn"
        - PolicyName: CloudMania-RekognitionDetectFacesPolicy-PhotoValidationProcessor
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "rekognition:DetectFaces"
                Resource: "*"
        - PolicyName: CloudMania-CloudWatchLogsPolicy-PhotoValidationProcessor
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: CloudMania-SNSPublishPolicy-PhotoValidationProcessor
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Ref "CloudManiaValidationResultSNSTopic"

  CloudManiaPhotoValidationProcessor:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: Lambda Function to Validate Passport Images uploaded to S3 and Store Results in DynamoDB.
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt "CloudManiaPhotoValidationProcessorLambdaExecutionRole.Arn"
      FunctionName: CloudManiaPhotoValidationProcessor
      Timeout: 120
      Environment:
        Variables:
          BUCKET_NAME: cloudmania-passportimages
          DYNAMODB_TABLE: CloudManiaValidationRequests
      Code:
        ZipFile: |
          """
          Creating a Lambda Function to Validate Passport Images uploaded to S3 and Store Results in DynamoDB

          Note:
          Best Practice to have separate Lambda functions for:
              1. scaling and performance (ex: independently move things around)
              2. observability (ex: finding errors, know what is failing and why within the functions themselves)
              3. code organization

          Lambda memory has a range of 128 Mb (default minimum) - 10000 Mb (10 Gb maximum)
          """

          import json
          import boto3
          import uuid
          import datetime
          import logging
          import os

          # Configure logging
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          # Get environment variables
          BUCKET_NAME = os.environ['BUCKET_NAME']
          DYNAMODB_TABLE = os.environ['DYNAMODB_TABLE']

          FACE_DETAILS_THRESHOLDS = {
              "Smile": {
                  "desiredValue": False, 
                  "minConfidence": 90
              }, 
              "Sunglasses": {
                  "desiredValue": False, 
                  "minConfidence": 90
              }, 
              "EyesOpen": {
                  "desiredValue": True, 
                  "minConfidence": 90
              }, 
              "MouthOpen": {
                  "desiredValue": False,
                  "minConfidence": 90
              }
          }

          rekognition_client = boto3.client('rekognition')
          dynamodb_client = boto3.resource('dynamodb')
          validation_table = dynamodb_client.Table(DYNAMODB_TABLE)

          def lambda_handler(event, context):
              
              #Step 1 - Extract File Name from PUT Event
              current_file_name = extract_file_name(event)
              
              #Step 2 - Call Rekognition DetectFaces API
              detect_faces_response = detect_faces(current_file_name)
              
              #Step 3 - Extract face details we care about and their value/confidence
              face_details = extract_face_details(detect_faces_response) #extract the attributes we care about

              #Step 4 - Evaluates values and thresholds to determine PASS/FAIL
              face_evaluation_result = evaluate_face(face_details)

              #Step 5 - Write Results to DynamoDB
              write_result_to_dynamo(face_evaluation_result, current_file_name, face_details)
              
              #Step 6 - Pipe result using Lambda Destinations
              publish_object = {
                  'FileName': current_file_name,
                  'ValidationResult': face_evaluation_result['result'],
                  'FailureReasons': json.dumps(face_evaluation_result['failure_reasons']),
                  'FileLocation': f'{BUCKET_NAME}/{current_file_name}',
                  # Did not include 'FaceDetails'. because SNS Publish has a payload limit of 256 Kb per message and this data will exceed that limit and the published message will fail.
              }
              return {
                  'statusCode': 200,
                  'body': json.dumps(publish_object)
              }
              
          def write_result_to_dynamo(evaluation_result, file_name, face_details):

              # Set the item attributes
              item_attributes = {
                      'FileName': file_name,
                      'ValidationResult': evaluation_result['result'],
                      'FailureReasons': json.dumps(evaluation_result['failure_reasons']),
                      'Timestamp': datetime.datetime.now().replace(microsecond=0).isoformat(),
                      'FileLocation': f'{BUCKET_NAME}/{file_name}',
                      'FaceDetails': json.dumps(face_details)
                      
              }
              
              response = validation_table.put_item(
                  Item=item_attributes)
              
              # Check the response to see if the item was added successfully
              if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                  print('Item added to table successfully!')
              else:
                  print('Error adding item to table.')

          def evaluate_face(parsed_face_scan):

              evaluation_result = {
                  "result": "PASS", #we assume it is a pass unless we prove otherwise
                  "failure_reasons": []
              }
              
              for key, value in FACE_DETAILS_THRESHOLDS.items():
                  temp_result = True #assume we pass the test
                  if parsed_face_scan[key]["Value"] != FACE_DETAILS_THRESHOLDS[key]["desiredValue"]:
                      print(f"Expected != Actual. FaceAttribute: {key} has a value: {parsed_face_scan[key]['Value']}, but requires {FACE_DETAILS_THRESHOLDS[key]['desiredValue']}")
                      temp_result = False
                  if parsed_face_scan[key]["Confidence"] < FACE_DETAILS_THRESHOLDS[key]["minConfidence"]:
                      print(f"Confidence is lower than minimum threshold. FaceAttribute: {key} has a confidence value: {parsed_face_scan[key]['Confidence']}, but must be greater than {FACE_DETAILS_THRESHOLDS[key]['minConfidence']}")
                      temp_result = False
                  
                  if temp_result is False:
                      evaluation_result["result"] = "FAIL"
                      evaluation_result["failure_reasons"].append(key)
              return evaluation_result

          def extract_face_details(result):
              parsed_response = {} 
              
              face_details = result["FaceDetails"]
              face = face_details[0]
              
              #iterate over all fields we care about and extract the details
              for key, value in FACE_DETAILS_THRESHOLDS.items():
                  parsed_response[key] = face[key]
                  
              return parsed_response

          def detect_faces(file_name):
              return rekognition_client.detect_faces(
              Image={
                  'S3Object': {
                      'Bucket': BUCKET_NAME,
                      'Name': file_name
                  }
              },
              Attributes=['ALL']
              )
              
          def extract_file_name(event):
              return event["Records"][0]["s3"]["object"]["key"]

  CloudManiaValidationResultSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "CloudManiaValidationResult"
      FifoTopic: False

  CloudManiaValidationResultSNSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: "ciphersight+cloudmaniasns@gmail.com"
      Protocol: "Email-JSON"
      TopicArn: !Ref "CloudManiaValidationResultSNSTopic"

  CloudManiaLambdaDestination:
    Type: "AWS::Lambda::EventInvokeConfig"
    Properties:
      Qualifier: $LATEST
      FunctionName: !Ref "CloudManiaPhotoValidationProcessor"
      DestinationConfig:
        OnSuccess:
          Destination: !Ref "CloudManiaValidationResultSNSTopic"
      MaximumEventAgeInSeconds: 3600
      MaximumRetryAttempts: 1

  CloudManiaImageRequestHandlerLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CloudMania-ImageRequestHandlerLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CloudMania-DynamoDBGetItemPolicy-ImageRequestHandler
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                Resource:
                  - !GetAtt "CloudManiaDynamoDBTable.Arn"
        - PolicyName: CloudMania-CloudWatchLogsPolicy-ImageRequestHandler
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  CloudManiaImageRequestHandler:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: Lambda Function to Retrieve Image Validation Results from DynamoDB.
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt "CloudManiaImageRequestHandlerLambdaExecutionRole.Arn"
      FunctionName: CloudManiaImageRequestHandler
      Timeout: 120
      Environment:
        Variables:
          DYNAMODB_TABLE: CloudManiaValidationRequests
      Code:
        ZipFile: |
          """
          Creating a Lambda API Request Handler and Integrate with DynamoDB

          Note:
          Best Practice to have separate Lambda functions for:
              1. scaling and performance (ex: independently move things around)
              2. observability (ex: finding errors, know what is failing and why within the functions themselves)
              3. code organization

          Lambda memory has a range of 128 Mb (default minimum) - 10000 Mb (10 Gb maximum)
          """

          import boto3
          import json
          import os

          # Get environment variables
          DYNAMODB_TABLE = os.environ['DYNAMODB_TABLE']

          dynamodb_client = boto3.resource('dynamodb')
          validation_table = dynamodb_client.Table(DYNAMODB_TABLE)

          def lambda_handler(event, context):
              try:
                  image_name = event['queryStringParameters']['imageName']
                  
                  response = validation_table.get_item(
                      Key={
                          'FileName': image_name
                      }
                  )
                  
                  # Check if the item was found
                  if 'Item' in response:
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Content-Type': 'application/json'
                          },
                          'body': json.dumps(response['Item'])
                      }
                  else:
                      return {
                          'statusCode': 404,
                          'headers': {
                              'Content-Type': 'application/json'
                          },
                          'body': json.dumps({'message': 'Image not found in the database'})
                      }
              
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json'
                      },
                      'body': json.dumps({'message': f"Internal Server Error: {str(e)}"})
                  }

  CloudManiaApiGatewayServiceLinkedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: CloudMania-ApiGatewayServiceLinkedRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'apigateway.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CloudMania-ApiGatewayPermissionsPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'elasticloadbalancing:AddListenerCertificates'
                  - 'elasticloadbalancing:RemoveListenerCertificates'
                  - 'elasticloadbalancing:ModifyListener'
                  - 'elasticloadbalancing:DescribeListeners'
                  - 'elasticloadbalancing:DescribeLoadBalancers'
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'xray:GetSamplingTargets'
                  - 'xray:GetSamplingRules'
                  - 'logs:CreateLogDelivery'
                  - 'logs:GetLogDelivery'
                  - 'logs:UpdateLogDelivery'
                  - 'logs:DeleteLogDelivery'
                  - 'logs:ListLogDeliveries'
                  - 'servicediscovery:DiscoverInstances'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'firehose:DescribeDeliveryStream'
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                Resource: 'arn:aws:firehose:*:*:deliverystream/amazon-apigateway-*'
              - Effect: 'Allow'
                Action:
                  - 'acm:DescribeCertificate'
                  - 'acm:GetCertificate'
                Resource: 'arn:aws:acm:*:*:certificate/*'
              - Effect: 'Allow'
                Action: 'ec2:CreateNetworkInterfacePermission'
                Resource: 'arn:aws:ec2:*:*:network-interface/*'
              - Effect: 'Allow'
                Action: 'ec2:CreateTags'
                Resource: 'arn:aws:ec2:*:*:network-interface/*'
                Condition:
                  ForAllValues:StringEquals:
                    'aws:TagKeys':
                      - 'Owner'
                      - 'VpcLinkId'
              - Effect: 'Allow'
                Action:
                  - 'ec2:ModifyNetworkInterfaceAttribute'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:AssignPrivateIpAddresses'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeAvailabilityZones'
                  - 'ec2:DescribeNetworkInterfaceAttribute'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DescribeNetworkInterfacePermissions'
                  - 'ec2:UnassignPrivateIpAddresses'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeRouteTables'
                  - 'ec2:DescribeSecurityGroups'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'servicediscovery:GetNamespace'
                  - 'servicediscovery:GetService'
                Resource:
                  - 'arn:aws:servicediscovery:*:*:namespace/*'
                  - 'arn:aws:servicediscovery:*:*:service/*'

  CloudManiaApiGatewayV2Api:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: "CloudMania-API"
      ApiKeySelectionExpression: "$request.header.x-api-key"
      ProtocolType: "HTTP"
      RouteSelectionExpression: "$request.method $request.path"
      DisableExecuteApiEndpoint: false

  CloudManiaApiGatewayV2Stage:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      StageName: "Development"
      StageVariables: {}
      ApiId: !Ref CloudManiaApiGatewayV2Api
      RouteSettings: {}
      DefaultRouteSettings:
        DetailedMetricsEnabled: false
      AutoDeploy: true

  CloudManiaApiGatewayV2Route:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref CloudManiaApiGatewayV2Api
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      RouteKey: "GET /images"
      Target: !Sub "integrations/${CloudManiaApiGatewayV2Integration}"

  CloudManiaApiGatewayV2Integration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref CloudManiaApiGatewayV2Api
      Description: "Integration for Lambda function."
      IntegrationType: "AWS_PROXY"
      IntegrationUri: !GetAtt CloudManiaImageRequestHandler.Arn
      IntegrationMethod: "GET"
      PayloadFormatVersion: "2.0"
      TimeoutInMillis: 30000

  CloudManiaApiGatewayV2Permission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "CloudManiaImageRequestHandler.Arn"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CloudManiaApiGatewayV2Api}/*/*/images"

  # Custom Resource to Delete ALL S3 Objects in the Bucket before Deleting the Passport Photo Screening application.
  CloudManiaS3DeletionCustomResource:
    Type: "Custom::S3Deletion"
    Properties:
      ServiceToken: !GetAtt CloudManiaS3ObjectDeletionFunction.Arn
      BucketName: !Ref CloudManiaImagesBucket

  # Lambda Execution Role to Delete ALL S3 Objects before Deleting the Passport Photo Screening application.
  CloudManiaS3DeletionLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CloudMania-S3DeletionLambdaExecutionRole
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CloudMania-S3DeletionPolicy-S3DeleteFunction
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                  - "s3:DeleteObject"
                Resource: 
                  - !Sub "arn:aws:s3:::cloudmania-passportimages"
                  - !Sub "arn:aws:s3:::cloudmania-passportimages/*"
        - PolicyName: CloudMania-CloudWatchLogsPolicy-S3DeleteFunction
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  # Lambda Function to Delete ALL S3 Objects before Deleting the Passport Photo Screening application.
  CloudManiaS3ObjectDeletionFunction:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: "CloudManiaS3ObjectDeletionFunction"
      Description: "Lambda Function to delete all objects in a specified S3 bucket upon CloudFormation stack deletion."
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt CloudManiaS3DeletionLambdaExecutionRole.Arn
      Timeout: 120
      Environment:
        Variables:
          BUCKET_NAME: cloudmania-passportimages
      Code:
        ZipFile: |
          import os 
          import boto3
          import logging
          import cfnresponse
          from botocore.exceptions import ClientError

          # Initialize S3 client
          client = boto3.client('s3')

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info("Received event: %s" % event)
              bucket = os.environ['BUCKET_NAME']
              prefix = ''  # Empty prefix to delete all objects
              
              result = cfnresponse.SUCCESS

              try:
                  if event['RequestType'] == 'Delete':
                      delete_objects(bucket, prefix)
              except ClientError as e:
                  logger.error('Error: %s', e)
                  result = cfnresponse.FAILED

              cfnresponse.send(event, context, result, {})

          def delete_objects(bucket, prefix):
              paginator = client.get_paginator('list_objects_v2')
              page_iterator = paginator.paginate(Bucket=bucket, Prefix=prefix)
              for page in page_iterator:
                  if 'Contents' in page:
                      objects = [{'Key': x['Key']} for x in page['Contents']]
                      client.delete_objects(Bucket=bucket, Delete={'Objects': objects})
              return cfnresponse.SUCCESS
